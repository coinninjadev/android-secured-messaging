apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'maven'
apply plugin: 'maven-publish'

def nexusUID = System.getenv("CN_NEXUS_UID") ? System.getenv("CN_NEXUS_UID") : nexusUID
def nexusPWD = System.getenv("CN_NEXUS_PWD") ? System.getenv("CN_NEXUS_PWD") : nexusPWD

def versionMajor = 0
def versionMinor = 1
def versionPatch = 6

//def ciAuthToken = System.getenv("CI_JOB_TOKEN") ? System.getenv("CI_JOB_TOKEN") : ciAuthToken
def ciApiEndpoint = System.getenv("CI_API_V4_URL") ? System.getenv("CI_API_V4_URL") : ""
def ciProjectNamespace = System.getenv("CI_PROJECT_NAMESPACE") ? System.getenv("CI_PROJECT_NAMESPACE") : ""
def mavenRepo = String.format("%s/groups/%s/-/packages/maven", ciApiEndpoint, ciProjectNamespace)

versionMajor = System.getenv("VERSION_MAJOR") ? System.getenv("VERSION_MAJOR") : versionMajor
versionMinor = System.getenv("VERSION_MINOR") ? System.getenv("VERSION_MINOR") : versionMinor
versionPatch = System.getenv("VERSION_PATCH") ? System.getenv("VERSION_PATCH") : versionPatch

def currentVersion = String.format("%s.%s.%s", versionMajor, versionMinor, versionPatch)

publishing {
    repositories {
//        maven {
//            url "https://git.coinninja.net/api/v4/projects/176/packages/maven"
//            credentials(HttpHeaderCredentials) {
//                name = "Private-Token"
//                value = ciAuthToken
//            }
//            authentication {
//                header(HttpHeaderAuthentication)
//            }
//        }

        maven {
            url "https://nexus.coinninja.net/repository/maven-releases/"
            credentials {
                username= nexusUID
                password= nexusPWD
            }
        }

    }
    publications {
        maven(MavenPublication) {
            groupId = "com.coinninja.messaging"
            artifactId = "cn_messaging-release"
            version = currentVersion
            artifact bundleReleaseAar

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if(it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null)
                    {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }

}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation group: 'org.cryptonode.jncryptor', name: 'jncryptor', version: '1.0.1'

    testImplementation 'junit:junit:4.12'
    testImplementation 'junit:junit:4.12'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0"
    testImplementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.56'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
repositories {
    mavenCentral()
}

